html,
body {
    --blue: #3f96e6;
    --red: #f03e2d;
    --transition:cubic-bezier(.58,.07,.51,.97);
    margin: 0;
    border: none;
    background-color: var(--bg);
    color: var(--text);
    overflow-x: hidden;
    font-family: sans-serif;
    transition: background-color var(--transition) 0.3s, color var(--transition) 0.3s;
}

body.dark {
    --bg: #222222;
    --ebg: #555555;
    --text: #dddddd;
    --etext: #eeeeee;
}

body.light {
    --bg: #eeeeee;
    --ebg: #e0e0e0;
    --text: #222222;
    --etext: #111111;
}

.intro {
    position: absolute;
    z-index: 0;
    top: 0px;
    left: 0px;
    width: 100%;
    height: 100%;
    transition: top var(--transition) 1.5s;
}

.intro .drag-file {
    background-color: var(--text);
    outline: 2px dashed var(--bg);
    color: var(--bg);
    outline-offset: -15px;
    border-radius: 5px;
    padding: 120px 20px;

    position: absolute;
    top: 50%;
    left: 50%;
    transform: translateY(-50%) translateX(-50%);

    width: 100%; /* vscode throws an error on this but it is needed */
    max-width: 680px;

    font-size: 1.25em;

    display: inline;
    text-align: center;
}

.intro .drag-file.highlight {
    background-color: var(--etext);
}

input#file, input#submit {
    width: 0.1px;
    height: 0.1px;
    opacity: 0;
    overflow: hidden;
    position: absolute;
    z-index: -1;
}

label {
    cursor: pointer;
    display: inline-block;
}
label:hover strong {
    color: var(--blue);
}

label.submit {
    padding: 4px 6px;
    border-radius: 5px;
    background-color: var(--ebg);
}

input[type=number] {
    position: relative;
    top: -1px;
    padding: 6px 4px;
    border-radius: 5px;
    background-color: var(--ebg);
    box-shadow: none;
    border: 1px var(--ebg);
    color: var(--text);
}

label.submit:hover {
    color: var(--blue);
}

input#file:focus+label strong,
input#file+label:hover strong {
    color: var(--blue);
}

.intro .uploading,
.intro .success {
    display: none;
}

.intro.uploading .uploading {
    display: inline;
}

.intro.done .success {
    display: inline;
}

.intro.uploading input#file+label,
.intro.done input#file+label {
    display: none;
}

.intro.done {
    top: -101%;
}

.intro+.main {
    position: absolute;
    top: -150%;
    transition: top ease-in 1.5s;
}

.intro.done+.main {
    top: 0%;
}

.main {
    padding: 1em;
    width: 100%; /* causes overflow but it is hidden */
    width: calc(100% - 2em);
}

.main #output {
    max-height: 400px;
    overflow-y: auto;
}

#output img {
    height: 2em;
    position: relative;
    left: 1em;
}
#output div.text {
    position: relative;
    left: 4em;
    top: -2.36em;
    width: 50%;
    width: calc(100% - 4em);
}
#output div.warning {
    display: none;
}
#output div.error {
    display: none;
}
#output.warning div.warning {
    display: block;
}
#output.error div.error {
    display: block;
}

#render-container {
    position: relative;
    width: 600px;
    height: 300px;
    border: 1px solid black;
    overflow: hidden;
    background-color: var(--ebg);
    transition: background-color var(--transition) 0.3s
}

#render-container span {
    position: absolute;
    bottom: 4px;
    left: 4px;
    font-size: 0.8em;
}

#grid-container {
    --width: 200px;
    --height: 150px;
    position: absolute;
    left: calc(50% - (var(--width) / 2));
    top: calc(50% - (var(--height) / 2));
    width: var(--width);
    height: var(--height);
    transform-style: preserve-3d;
}

.note {
    --size: 50px;
    width: var(--size);
    height: var(--size);
    position: absolute;
    transform-style: preserve-3d;
}

.note-face {
    position: absolute;
    display: block;
    width: var(--size);
    height: var(--size);
    outline: 0.5px solid black;
}

.front {
    transform: rotateY(0deg) translateZ(calc(var(--size) / 2));
}

.back {
    transform: rotateY(180deg) translateZ(calc(var(--size) / 2));
}

.left {
    transform: rotateY(-90deg) translateZ(calc(var(--size) / 2));
}

.right {
    transform: rotateY(90deg) translateZ(calc(var(--size) / 2));
}

.top {
    transform: rotateX(90deg) translateZ(calc(var(--size) / 2));
}

.bottom {
    transform: rotateX(-90deg) translateZ(calc(var(--size) / 2));
}

.bomb {
    background-image: url('assets/bomb.svg');
}

.dot_front_blue {
    background-image: url('assets/dot_front_blue.svg');
}

.dot_front_red {
    background-image: url('assets/dot_front_red.svg');
}

.note_front_blue {
    background-image: url('assets/note_front_blue.svg');
}

.note_front_red {
    background-image: url('assets/note_front_red.svg');
}

.note_side_blue {
    background-image: url('assets/note_side_blue.svg');
}

.note_side_red {
    background-image: url('assets/note_side_red.svg');
}

.theme {
    position: absolute;
    top: 1em;
    right: 1em;
    z-index: 11;
    font-size: 17.5px;
}

@supports(-webkit-appearance: none) or (-moz-appearance: none) {
    input[type='checkbox'] {
        -webkit-appearance: none;
        -moz-appearance: none;
        height: 20px;
        outline: none;
        display: inline-block;
        vertical-align: top;
        position: relative;
        margin: 0;
        cursor: pointer;
        border: 1px solid var(--bg);
        background: var(--red);
        transition: background .3s, border-color .3s;
    }

    input[type='checkbox']:after {
        content: '';
        display: block;
        left: 0;
        top: 0;
        position: absolute;
        transition: transform 0.3s var(--transition);
    }

    input[type='checkbox']:checked {
        background: var(--blue);
    }

    input[type='checkbox'] {
        width: 40px;
        border-radius: 11px;
    }

    input[type='checkbox']:after {
        left: 3px;
        top:  2px;
        border-radius: 50%;
        width: 14px;
        height: 14px;
        background: #eeeeee;
        -webkit-transform: translateX(var(--x, 0));
        transform: translateX(var(--x, 0));
    }

    input[type='checkbox']:checked {
        --x: 18px;
    }
}